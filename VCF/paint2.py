# encoding=utf-8
import matplotlib

matplotlib.rcParams["backend"] = "SVG"
import numpy as np
import matplotlib.pyplot as plt

import pandas as pd

# ##绘制第一个实验结果
#
# # 输入因变量(指纹值长度从4到20下，空间利用率大小)
# # cf_15 = [0.9448486328125, 0.9572662353515625, 0.967730712890625, 0.9730804443359375, 0.976959228515625,
# #          0.9806976318359375, 0.9809051513671875, 0.982000732421875, 0.98135986328125, 0.9825469970703125,
# #          0.9817657470703125, 0.98175048828125, 0.9824859619140625, 0.982421875, 0.982537841796875, 0.9818634033203125,
# #          0.9823211669921875]
# # vcf_15 = [0.9500579833984375, 0.9645050048828125, 0.975311279296875, 0.9819915771484375, 0.98736572265625,
# #           0.991705322265625, 0.9943450927734375, 0.995831298828125, 0.997509765625, 0.9995269775390625,
# #           0.9995208740234375, 0.99952392578125, 0.9995635986328125, 0.99949951171875, 0.999481201171875,
# #           0.9994873046875, 0.9993621826171875]
# cf_20 = [0.9443682670593262, 0.9576701164245606, 0.9672259330749512, 0.9737449645996094, 0.9774262428283691,
#          0.9796605110168457, 0.9810849189758301, 0.9815999031066894, 0.9818359375, 0.981987190246582,
#          0.9820775985717773, 0.9819500923156739, 0.9819897651672364, 0.9820786476135254, 0.9820437431335449,
#          0.9820867538452148, 0.9820374488830567]
# vcf_20 = [0.9499533653259278, 0.9643671989440918, 0.9750454902648926, 0.9824884414672852, 0.987306785583496,
#           0.9909276008605957, 0.9936781883239746, 0.9955011367797851, 0.9965251922607422, 0.997525691986084,
#           0.9982743263244629, 0.9987883567810059, 0.9992306709289551, 0.9994045257568359, 0.999544906616211,
#           0.9995450019836426, 0.9995450973510742]
#
# # y1 = np.array(cf_15)
# # y2 = np.array(vcf_15)
# y3 = np.array(cf_20)
# y4 = np.array(vcf_20)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x = np.linspace(4, 20, y3.shape[0])
# # 画图
# # ax.plot(x, y1, label='cf_15', linestyle='--', marker='*', markersize='8')
# # ax.plot(x, y2, label='vcf_15', linestyle='--', marker='o', markersize='8')
# ax.plot(x, y3, label='CF', linestyle='-', marker='v', markersize='8')
# ax.plot(x, y4, label='VCF', linestyle='-', marker='d', markersize='8')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('f: fingerprint size in bits', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# ax.set_ylabel('α: load factor', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_1_1.svg', dpi=600, format='svg')
# # fig.savefig('1.png')   #保存图片

#
# #绘制第二个实验结果
#
# ##第一个图，关于vcf的
# # 输入因变量
# cf = [0.97958984375, 0.9808349609375, 0.9812744140625, 0.981573486328125, 0.98177490234375, 0.9818216959635416, 0.9818771362304688, 0.9819053649902344, 0.9819271511501736, 0.98195068359375, 0.9819694345647638, 0.9819844365119934, 0.982001832815317, 0.9820124370711191]
# vcf7 = [1.0, 0.999755859375, 0.9996744791666666, 0.99969482421875, 0.9996826171875, 0.9996388753255209, 0.9996381487165179, 0.9995965957641602, 0.9993260701497396, 0.9992355346679688, 0.9991292086514559, 0.9990477561950684, 0.9989906824552096, 0.9989436098507473]
# vcf6 = [0.99912109375, 0.9992919921875, 0.9993082682291666, 0.9993743896484375, 0.999403076171875, 0.9994216918945312, 0.9994384765625, 0.9993764877319335, 0.999275631374783, 0.999207992553711, 0.9991323471069335, 0.9990648865699768, 0.9990173266484187, 0.9989619646753584]
# vcf5 = [0.99951171875, 0.9994873046875, 0.9994303385416666, 0.999456787109375, 0.9994775390625, 0.9994873046875, 0.9994897024972098, 0.9994196891784668, 0.9993144141303169, 0.999243221282959, 0.9991636016152122, 0.9990928848584493, 0.9990424944804265, 0.998984922681536]
# vcf4 = [0.999609375, 0.999609375, 0.99951171875, 0.9995208740234375, 0.999510498046875, 0.9994984944661458, 0.9994925362723214, 0.9994194984436036, 0.999312761094835, 0.9992387771606446, 0.9991570992903276, 0.9990853349367778, 0.9990343423990103, 0.9989760245595659]
# vcf3 = [0.99921875, 0.99931640625, 0.9993082682291666, 0.9993438720703125, 0.999346923828125, 0.9993459065755208, 0.9993456159319196, 0.9992799758911133, 0.9991812388102214, 0.9991134452819824, 0.9990383755077016, 0.9989719827969868, 0.9989248459155743, 0.9988703514848437]
# vcf2 = [0.99931640625, 0.999072265625, 0.9990234375, 0.9989776611328125, 0.99894287109375, 0.9989227294921875, 0.9989181518554687, 0.9988646507263184, 0.9987811194525824, 0.9987248039245605, 0.9986607551574707, 0.9986036499341329, 0.9985636839499841, 0.9985159737723214]
# vcf1 = [0.99677734375, 0.996728515625, 0.9965169270833333, 0.996466064453125, 0.996458740234375, 0.9964406331380208, 0.99644775390625, 0.9964339256286621, 0.9964013841417101, 0.9963778305053711, 0.9963465170426802, 0.9963201403617858, 0.9963020104628343, 0.9962780160563333]
# dcf = [0.9990234375, 0.999267578125, 0.9994303385416666, 0.999420166015625, 0.999462890625, 0.9994913736979166, 0.9994964599609375, 0.9993553161621094, 0.9993167453342013, 0.9991598129272461, 0.9990785772150214, 0.9990355571111044, 0.9989902239579421, 0.9989385264260429]
#
# y1 = np.array(cf)
# y2 = np.array(vcf1)
# y3 = np.array(vcf2)
# y4 = np.array(vcf3)
# y5 = np.array(vcf4)
# y6 = np.array(vcf5)
# y7 = np.array(vcf6)
# y8 = np.array(vcf7)
# y9 = np.array(dcf)
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x = np.linspace(10, 23, y1.shape[0])
# # 画图
# ax.plot(x, y1, label='CF', linestyle='-', marker='^', markersize='8')
# ax.plot(x, y2, label='IVCF1', linestyle='--', marker='D', markersize='8')
# ax.plot(x, y3, label='IVCF2', linestyle=':', marker='v', markersize='8')
# ax.plot(x, y4, label='IVCF3', linestyle='-.', marker='x', markersize='8')
# ax.plot(x, y5, label='IVCF4', linestyle='-', marker='<', markersize='8')
# ax.plot(x, y6, label='IVCF5', linestyle='--', marker='o', markersize='8')
# ax.plot(x, y7, label='IVCF6', linestyle=':', marker='>', markersize='8')
# ax.plot(x, y8, label='VCF', linestyle='-.', marker='*', markersize='8')
# ax.plot(x, y9, label='D-ary CF', linestyle='-', marker='+', markersize='8')
#
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('filter size()')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('n: filter size', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('α: load factor', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 13})
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_1.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# ##第二个图，关于Dvcf的
# # 输入因变量
# cf = [0.97958984375, 0.9808349609375, 0.9812744140625, 0.981573486328125, 0.98177490234375, 0.9818216959635416,
#       0.9818771362304688, 0.9819053649902344, 0.9819271511501736, 0.98195068359375, 0.9819694345647638,
#       0.9819844365119934, 0.982001832815317, 0.9820124370711191]
# Dvcf1 = [0.9853515625, 0.9869873046875, 0.9879475911458333, 0.9886260986328125, 0.98893798828125, 0.9891794840494792,
#          0.9894025530133929, 0.9895709037780762, 0.9896919674343533, 0.9898011589050293, 0.9898867260326039,
#          0.9899596373240153, 0.990023240676293, 0.9900756980691637]
# Dvcf2 = [0.98876953125, 0.99072265625, 0.9917236328125, 0.9925323486328125, 0.993018798828125, 0.9933278401692708,
#          0.9935721261160714, 0.9937627792358399, 0.9938990698920356, 0.9940146636962891, 0.9940975102511319,
#          0.9941668272018432, 0.994228825202355, 0.9942752872194562]
# Dvcf3 = [0.991796875, 0.9936767578125, 0.9945149739583333, 0.99512939453125, 0.995562744140625, 0.9958282470703125,
#          0.9960279192243303, 0.9961603164672852, 0.9962393442789713, 0.996309585571289, 0.9963532707907937,
#          0.9963892658551534, 0.9964247923630934, 0.9964445642062596]
# Dvcf4 = [0.993359375, 0.995068359375, 0.9958577473958333, 0.996441650390625, 0.9967919921875, 0.9970509847005208,
#          0.9972423008510045, 0.9973424911499024, 0.997385745578342, 0.99742919921875, 0.997447395324707,
#          0.9974602580070495, 0.9974784686015202, 0.9974814925874983]
# Dvcf5 = [0.99443359375, 0.996044921875, 0.9967854817708334, 0.997259521484375, 0.997584228515625, 0.9978123982747396,
#          0.9979742867606026, 0.9980443954467774, 0.9980531904432509, 0.9980706214904785, 0.9980652722445401,
#          0.998058561484019, 0.9980613800195547, 0.9980504018919808]
# Dvcf6 = [0.9962890625, 0.997265625, 0.9977457682291667, 0.998114013671875, 0.9983203125, 0.9984761555989583,
#          0.9985894339425223, 0.9986094474792481, 0.9985782199435764, 0.9985649681091309, 0.9985331015153365,
#          0.9985031882921854, 0.998486984693087, 0.9984589627810887]
# Dvcf7 = [0.9962890625, 0.99755859375, 0.9980875651041666, 0.9984100341796875, 0.99859619140625, 0.9987319946289063,
#          0.9988298688616072, 0.9988340377807617, 0.9987879859076606, 0.9987632751464843, 0.9987231948158958,
#          0.998685896396637, 0.9986635629947369, 0.9986299318926675]
# Dvcf8 = [0.99658203125, 0.9977783203125, 0.9982828776041667, 0.9985687255859375, 0.99874755859375, 0.998876953125,
#          0.9989706856863839, 0.9989667892456054, 0.9989123874240451, 0.998881549835205, 0.9988350868225098,
#          0.9987927238146465, 0.9987664112677941, 0.9987291787351881]
# dvcf = [0.9990234375, 0.999267578125, 0.9994303385416666, 0.999420166015625, 0.999462890625, 0.9994913736979166,
#         0.9994964599609375, 0.9993553161621094, 0.9993167453342013, 0.9991598129272461, 0.9990785772150214,
#         0.9990355571111044, 0.9989902239579421, 0.9989385264260429]
#
# y1 = np.array(cf)
# y2 = np.array(Dvcf1)
# y3 = np.array(Dvcf2)
# y4 = np.array(Dvcf3)
# y5 = np.array(Dvcf4)
# y6 = np.array(Dvcf5)
# y7 = np.array(Dvcf6)
# y8 = np.array(Dvcf7)
# y9 = np.array(Dvcf8)
# y10 = np.array(dvcf)
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x = np.linspace(10, 23, y1.shape[0])
# # 画图
# ax.plot(x, y1, label='CF', linestyle='-', marker='^', markersize='8')
# ax.plot(x, y2, label='DVCF1', linestyle='--', marker='D', markersize='8')
# ax.plot(x, y3, label='DVCF2', linestyle=':', marker='v', markersize='8')
# ax.plot(x, y4, label='DVCF3', linestyle='-.', marker='x', markersize='8')
# ax.plot(x, y5, label='DVCF4', linestyle='-', marker='<', markersize='8')
# ax.plot(x, y6, label='DVCF5', linestyle='--', marker='o', markersize='8')
# ax.plot(x, y7, label='DVCF6', linestyle=':', marker='>', markersize='8')
# ax.plot(x, y8, label='DVCF7', linestyle='-.', marker='s', markersize='8')
# ax.plot(x, y9, label='DVCF8', linestyle='-', marker='*', markersize='8')
# ax.plot(x, y10, label='D-ary CF',  linestyle='-', marker='+', markersize='8')
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('filter size()')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('n: filter size', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('α: load factor', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='lower right', prop={'family': 'Times New Roman', "size": 13})
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_2.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# ##实验二中第三个图
# # 输入因变量
# cf = [0.97958984375, 0.9808349609375, 0.9812744140625, 0.981573486328125, 0.98177490234375, 0.9818216959635416,
#       0.9818771362304688, 0.9819053649902344, 0.9819271511501736, 0.98195068359375, 0.9819694345647638,
#       0.9819844365119934, 0.982001832815317, 0.9820124370711191]
# vcf7 = [1.0, 0.999755859375, 0.9996744791666666, 0.99969482421875, 0.9996826171875, 0.9996388753255209,
#         0.9996381487165179, 0.9995965957641602, 0.9993260701497396, 0.9992355346679688, 0.9991292086514559,
#         0.9990477561950684, 0.9989906824552096, 0.9989436098507473]
# vcf6 = [0.9990234375, 0.99920654296875, 0.99932861328125, 0.9993438720703125, 0.9994049072265625, 0.9994277954101562,
#         0.9994446890694755, 0.9993810653686523, 0.9992654588487413, 0.9991939544677735, 0.9991562799973921,
#         0.9990950922171274, 0.9990500395114605, 0.9990041681698391]
# vcf5 = [0.99951171875, 0.9994873046875, 0.9994303385416666, 0.999456787109375, 0.9994775390625, 0.9994873046875,
#         0.9994897024972098, 0.9994196891784668, 0.9993144141303169, 0.999243221282959, 0.9991636016152122,
#         0.9990928848584493, 0.9990424944804265, 0.998984922681536]
# vcf4 = [0.999609375, 0.999609375, 0.99951171875, 0.9995208740234375, 0.999510498046875, 0.9994984944661458,
#         0.9994925362723214, 0.9994194984436036, 0.999312761094835, 0.9992387771606446, 0.9991570992903276,
#         0.9990853349367778, 0.9990343423990103, 0.9989760245595659]
# vcf3 = [0.99921875, 0.99931640625, 0.9993082682291666, 0.9993438720703125, 0.999346923828125, 0.9993459065755208,
#         0.9993456159319196, 0.9992799758911133, 0.9991812388102214, 0.9991134452819824, 0.9990383755077016,
#         0.9989719827969868, 0.9989248459155743, 0.9988703514848437]
# vcf2 = [0.99931640625, 0.999072265625, 0.9990234375, 0.9989776611328125, 0.99894287109375, 0.9989227294921875,
#         0.9989181518554687, 0.9988646507263184, 0.9987811194525824, 0.9987248039245605, 0.9986607551574707,
#         0.9986036499341329, 0.9985636839499841, 0.9985159737723214]
# vcf1 = [0.99677734375, 0.996728515625, 0.9965169270833333, 0.996466064453125, 0.996458740234375, 0.9964406331380208,
#         0.99644775390625, 0.9964339256286621, 0.9964013841417101, 0.9963778305053711, 0.9963465170426802,
#         0.9963201403617858, 0.9963020104628343, 0.9962780160563333]
#
# Dvcf1 = [0.9853515625, 0.9869873046875, 0.9879475911458333, 0.9886260986328125, 0.98893798828125, 0.9891794840494792,
#          0.9894025530133929, 0.9895709037780762, 0.9896919674343533, 0.9898011589050293, 0.9898867260326039,
#          0.9899596373240153, 0.990023240676293, 0.9900756980691637]
# Dvcf2 = [0.98876953125, 0.99072265625, 0.9917236328125, 0.9925323486328125, 0.993018798828125, 0.9933278401692708,
#          0.9935721261160714, 0.9937627792358399, 0.9938990698920356, 0.9940146636962891, 0.9940975102511319,
#          0.9941668272018432, 0.994228825202355, 0.9942752872194562]
# Dvcf3 = [0.991796875, 0.9936767578125, 0.9945149739583333, 0.99512939453125, 0.995562744140625, 0.9958282470703125,
#          0.9960279192243303, 0.9961603164672852, 0.9962393442789713, 0.996309585571289, 0.9963532707907937,
#          0.9963892658551534, 0.9964247923630934, 0.9964445642062596]
# Dvcf4 = [0.993359375, 0.995068359375, 0.9958577473958333, 0.996441650390625, 0.9967919921875, 0.9970509847005208,
#          0.9972423008510045, 0.9973424911499024, 0.997385745578342, 0.99742919921875, 0.997447395324707,
#          0.9974602580070495, 0.9974784686015202, 0.9974814925874983]
# Dvcf5 = [0.99443359375, 0.996044921875, 0.9967854817708334, 0.997259521484375, 0.997584228515625, 0.9978123982747396,
#          0.9979742867606026, 0.9980443954467774, 0.9980531904432509, 0.9980706214904785, 0.9980652722445401,
#          0.998058561484019, 0.9980613800195547, 0.9980504018919808]
# Dvcf6 = [0.9962890625, 0.997265625, 0.9977457682291667, 0.998114013671875, 0.9983203125, 0.9984761555989583,
#          0.9985894339425223, 0.9986094474792481, 0.9985782199435764, 0.9985649681091309, 0.9985331015153365,
#          0.9985031882921854, 0.998486984693087, 0.9984589627810887]
# Dvcf7 = [0.9962890625, 0.99755859375, 0.9980875651041666, 0.9984100341796875, 0.99859619140625, 0.9987319946289063,
#          0.9988298688616072, 0.9988340377807617, 0.9987879859076606, 0.9987632751464843, 0.9987231948158958,
#          0.998685896396637, 0.9986635629947369, 0.9986299318926675]
# Dvcf8 = [0.99658203125, 0.9977783203125, 0.9982828776041667, 0.9985687255859375, 0.99874755859375, 0.998876953125,
#          0.9989706856863839, 0.9989667892456054, 0.9989123874240451, 0.998881549835205, 0.9988350868225098,
#          0.9987927238146465, 0.9987664112677941, 0.9987291787351881]
#
# dcf = [0.9990234375, 0.999267578125, 0.9994303385416666, 0.999420166015625, 0.999462890625, 0.9994913736979166,
#        0.9994964599609375, 0.9993553161621094, 0.9993167453342013, 0.9991598129272461, 0.9990785772150214,
#        0.9990355571111044, 0.9989902239579421, 0.9989385264260429]
#
# y1 = [np.mean(cf), np.mean(vcf1), np.mean(vcf2), np.mean(vcf3), np.mean(vcf4), np.mean(vcf5), np.mean(vcf6),
#       np.mean(vcf7)]
# y2 = [np.mean(cf), np.mean(Dvcf1), np.mean(Dvcf2), np.mean(Dvcf3), np.mean(Dvcf4), np.mean(Dvcf5), np.mean(Dvcf6),
#       np.mean(Dvcf7), np.mean(Dvcf8)]
# y3 = [np.mean(dcf)]
#
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(y1)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(y2)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# y3 = np.array(y3)
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # 画图
# ax.plot(x1, y1, label='IVCF', linestyle='-', marker='o', markersize='8')
# ax.plot(x2, y2, label='DVCF', linestyle='--', marker='^', markersize='8')
# #ax.plot(x2, y3, label='DCF', linestyle='-.', marker='D', markersize='8')
# plt.axhline(y=np.mean(dcf), label='D-ary CF', color = "r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('α: load factor', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
#
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_3.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# ##实验二中第四个图，比较各变体中平均每个对象所需的踢出重放次数
# #输入因变量
# cf = [13.691796875, 13.1710693359375, 12.992097981770833, 12.83060302734375, 12.746060791015625, 12.716170247395834, 12.7028810773577, 12.695965194702149, 12.69223141140408, 12.684385833740235, 12.677855543656783, 12.673445697625478, 12.66706392948444, 12.663523031132561]
# vcf1 = [3.83583984375, 3.987109375, 4.090275065104167, 4.095941162109375, 4.110791015625, 4.117437744140625, 4.12598615373884, 4.136361217498779, 4.149764039781359, 4.161918525695801, 4.1749683206731625, 4.185831495126089, 4.193469940699064, 4.2031116996492655]
# vcf2 = [1.96103515625, 1.978466796875, 1.9618815104166667, 1.98870849609375, 2.02272705078125, 2.0415573120117188, 2.0497804914202007, 2.072036075592041, 2.1023782094319663, 2.1227592277526854, 2.1473377921364523, 2.169586928685506, 2.1847032363598164, 2.2036337758813587]
# vcf3 = [1.5162109375, 1.51953125, 1.4856119791666667, 1.4696929931640625, 1.47560302734375, 1.4772898356119792, 1.4816009521484375, 1.5066705703735352, 1.5470923953586155, 1.574103717803955, 1.6053476160222835, 1.6325246373812357, 1.6518957119721633, 1.6748616533620018]
# vcf4 = [1.2349609375, 1.2502685546875, 1.3017415364583333, 1.293963623046875, 1.29316162109375, 1.2986185709635416, 1.3022314889090403, 1.3304633140563964, 1.3715983072916667, 1.399206428527832, 1.4315140464089133, 1.4596593260765076, 1.4793597019635714, 1.5028078292097364]
# vcf5 = [1.5548828125, 1.400439453125, 1.3864908854166667, 1.3531951904296875, 1.325711669921875, 1.3114486694335938, 1.2996289934430802, 1.3175337791442872, 1.3523327297634549, 1.37441162109375, 1.4025961008938876, 1.427804672718048, 1.4451180017911471, 1.4662559287888663]
# vcf6 = [1.51953125, 1.42071533203125, 1.3990071614583333, 1.3787155151367188, 1.3339996337890625, 1.3060061136881511, 1.2859115600585938, 1.3041110038757324, 1.3422186109754775, 1.3644032955169678, 1.3742603605443782, 1.396280695994695, 1.4116368660560021, 1.428345343896321]
# vcf7 = [0.8056640625, 1.176513671875, 1.283447265625, 1.220123291015625, 1.21695556640625, 1.2260996500651042, 1.2092045375279017, 1.2187204360961914, 1.3248430887858074, 1.3550432205200196, 1.390450044111772, 1.420266032218933, 1.4409098625183105, 1.45671808719635]
#
# Dvcf1 = [11.03818359375, 10.040966796875, 9.453767903645833, 9.0560546875, 8.860595703125, 8.729633076985676, 8.603404889787946, 8.504717922210693, 8.433149380154079, 8.37061014175415, 8.31993380459872, 8.277196808656056, 8.240283239804782, 8.209637358358927]
# Dvcf2 = [8.755859375, 7.599755859375, 7.0830810546875, 6.59488525390625, 6.309471435546875, 6.126970418294271, 5.98456551688058, 5.867890644073486, 5.782737223307292, 5.711065731048584, 5.656407295573842, 5.610745890935262, 5.570876402121324, 5.538808732373374]
# Dvcf3 = [7.74541015625, 6.2513671875, 5.577970377604166, 5.104214477539062, 4.789681396484375, 4.588914489746093, 4.431358555385045, 4.32187852859497, 4.243119769626194, 4.177491455078125, 4.128558167544278, 4.0877545515696205, 4.051707590543307, 4.024814957380295]
# Dvcf4 = [6.18212890625, 4.968994140625, 4.392342122395833, 3.9873565673828124, 3.72001953125, 3.5312881469726562, 3.392503138950893, 3.30153341293335, 3.243349329630534, 3.193774814605713, 3.160159327767112, 3.132332134246826, 3.1061306770031267, 3.088777270487377]
# Dvcf5 = [5.58125, 4.36806640625, 3.7945882161458333, 3.39344482421875, 3.132786865234375, 2.9363942464192707, 2.802197047642299, 2.7181979179382325, 2.668456056382921, 2.6255830001831053, 2.598821501298384, 2.5771030743916827, 2.5555782281435455, 2.542688697576523]
# Dvcf6 = [4.562109375, 3.5509521484375, 3.0767822265625, 2.7522430419921875, 2.54432861328125, 2.3942906697591146, 2.2819981166294645, 2.2209726333618165, 2.1916901482476128, 2.1637877655029296, 2.149628379128196, 2.139465419451396, 2.127062361056988, 2.122600875582014]
# Dvcf7 = [4.15185546875, 3.2596923828125, 2.7449951171875, 2.436260986328125, 2.237041015625, 2.0986068725585936, 1.9966177804129464, 1.9426491737365723, 1.9206520080566407, 1.8980380249023439, 1.8882657571272417, 1.8817368706067403, 1.8724883941503672, 1.8710772156715394]
# Dvcf8 = [4.098046875, 3.0512939453125, 2.5507568359375, 2.2436553955078127, 2.04556396484375, 1.905279541015625, 1.7966040475027902, 1.747487735748291, 1.7306881798638238, 1.7115936851501465, 1.7055881066755816, 1.7021584550539652, 1.6953774543908926, 1.696191555261612]
#
# dcf = [1.333984375, 1.3642578125, 1.23974609375, 1.228851318359375, 1.22271728515625, 1.2081095377604167, 1.2012241908482142, 1.2498579025268555, 1.2616034613715277, 1.329295539855957, 1.3612570329145952, 1.375369946161906, 1.3925782166994536, 1.4131821053368705]
#
# y1 = [np.mean(cf), np.mean(vcf1), np.mean(vcf2), np.mean(vcf3), np.mean(vcf4), np.mean(vcf5), np.mean(vcf6),
#       np.mean(vcf7)]
# y2 = [np.mean(cf), np.mean(Dvcf1), np.mean(Dvcf2), np.mean(Dvcf3), np.mean(Dvcf4), np.mean(Dvcf5), np.mean(Dvcf6),
#       np.mean(Dvcf7), np.mean(Dvcf8)]
#
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(y1)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(y2)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # 画图
# ax.plot(x1, y1, label='IVCF', linestyle='-', marker='o', markersize='8')
# ax.plot(x2, y2, label='DVCF', linestyle='--', marker='^', markersize='8')
# plt.axhline(y=np.mean(dcf), label='D-ary CF', color="r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('E$_0$: number of evictions', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_4.svg', dpi=600, format='svg')
# # fig.savefig('1.png')



# ###实验二中第五个图，比较vcf的存储时间消耗
# ##输入因变量
# cf = [0.0429885, 0.0684698, 0.10561219999999999, 0.16316195, 0.26758262, 0.4531954, 0.7939508285714284, 1.4165738125, 2.5719223777777778, 4.69026526, 8.625461409090908, 15.932990541666667, 28.888658007692307, 53.40469534285714]
# vcf1 = [0.0339817, 0.05597305, 0.0889556, 0.1426752, 0.23627636, 0.4007892999999999, 0.7003423571428572, 1.2422141749999998, 2.2362548222222225, 4.05744027, 7.4381289, 13.662967724999998, 24.640267884615387, 45.77012900714287]
# vcf2 = [0.029976000000000003, 0.04347070000000001, 0.06829503333333334, 0.107438875, 0.1783016, 0.30200166666666667, 0.5254320714285715, 0.9342512, 1.6990953, 3.08995527, 5.684608472727272, 10.48849355, 18.87169456923077, 35.26598804285714]
# vcf3 = [0.025991999999999998, 0.039983050000000006, 0.05930173333333334, 0.09495252500000001, 0.15811726, 0.27019076666666664, 0.47217748571428575, 0.8476742875, 1.5603930999999998, 2.8388908, 5.249569045454545, 9.687255933333331, 17.443727792307694, 32.57380921428571]
# vcf4 = [0.0259851, 0.039476, 0.0596356, 0.0944483, 0.15531657999999998, 0.2631927833333333, 0.46218228571428577, 0.8269350124999999, 1.5147510111111113, 2.7564345699999997, 5.096106190909091, 9.432475608333334, 16.988293146153847, 31.954194078571422]
# vcf5 = [0.0259799, 0.035978899999999994, 0.058635333333333345, 0.093198025, 0.15331492000000002, 0.25819276666666663, 0.44861397142857146, 0.8094400374999999, 1.4905378111111112, 2.7244480299999996, 5.045311163636364, 9.346018291666667, 16.844634153846155, 31.55701582142857]
# vcf6 = [0.02748925, 0.03998225, 0.06247458333333333, 0.10557218749999998, 0.16741604999999998, 0.28069358333333333, 0.47725275, 0.85661915625, 1.5750930277777777, 2.8324746250000006, 5.060922068181818, 9.153398208333334, 16.89019121153846, 31.794966125]
# vcf7 = [0.020023, 0.0399945, 0.06329933333333333, 0.09245025000000001, 0.155916, 0.2631865, 0.44975457142857145, 0.80207075, 1.589151, 2.8411462999999997, 5.210549181818181, 9.561235833333333, 17.345686076923077, 31.959488785714285]
#
# dcf = [0.0921798, 0.12767905000000002, 0.19797556666666663, 0.32158342500000003, 0.52200386, 0.8926596499999999, 1.5662475285714281, 2.9606388125, 5.558423777777778, 10.720886260000002, 20.33046438181818, 38.87655804166668, 73.30153241538461, 139.57338811428573]
#
# y1 = np.array(cf)
# y2 = np.array(vcf1)
# y3 = np.array(vcf2)
# y4 = np.array(vcf3)
# y5 = np.array(vcf4)
# y6 = np.array(vcf5)
# y7 = np.array(vcf6)
# y8 = np.array(vcf7)
# y9 = np.array(dcf)
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# ax2 = ax.twinx()
# # 设置自变量的范围和个数
# x = np.linspace(10, 23, y1.shape[0])
# # 画图
# s1=ax.plot(x, y1, label='CF', linestyle='-', marker='^', markersize='8')
# s2=ax.plot(x, y2, label='IVCF1', linestyle='--', marker='D', markersize='8')
# s3=ax.plot(x, y3, label='IVCF2', linestyle=':', marker='v', markersize='8')
# s4=ax.plot(x, y4, label='IVCF3', linestyle='-.', marker='x', markersize='8')
# s5=ax.plot(x, y5, label='IVCF4', linestyle='-', marker='<', markersize='8')
# s6=ax.plot(x, y6, label='IVCF5', linestyle='--', marker='o', markersize='8')
# s7=ax.plot(x, y7, label='IVCF6', linestyle=':', marker='>', markersize='8')
# s8=ax.plot(x, y8, label='VCF', linestyle='-.', marker='*', markersize='8')
# s9=ax2.plot(x, y9, label='D-ary CF', color="r", linestyle='-', marker='+', markersize='8')
#
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('filter size()')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('n: filter size',  fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('VCF insertion time(s)',  fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # ax2.set_xlabel("same")
# ax2.set_ylabel('D-ary CF insertion time(s)',  fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
#
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
#
# ax2.tick_params(labelsize=16)
# labels2 = ax2.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels2]
#
# # 刻度线
# for line in ax2.yaxis.get_ticklines():
#     # line is a Line2D instance
#     line.set_color('r')
#     # line.set_markersize(25)
#     # line.set_markeredgewidth(3)
#
# # 刻度 文字
# for label in ax2.yaxis.get_ticklabels():
#     # label is a Text instance
#     label.set_color('r')
#     # label.set_rotation(45)
#     # label.set_fontsize(16)
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例,图例控制,将图例放在一起
# ss = s1+s2+s3+s4+s5+s6+s7+s8+s9
# labs = [l.get_label() for l in ss]
# ax.legend(ss, labs, loc="best",  prop={'family': 'Times New Roman', "size": 14})
# # legend = ax.legend(loc=2)
# # legend2 = ax2.legend(loc="best")
#
# # plt.legend()
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_5.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')


# ###实验二中第六个图，比较Dvcf的存储时间消耗
# ##输入因变量
# cf = [0.0429885, 0.0684698, 0.10561219999999999, 0.16316195, 0.26758262, 0.4531954, 0.7939508285714284, 1.4165738125, 2.5719223777777778, 4.69026526, 8.625461409090908, 15.932990541666667, 28.888658007692307, 53.40469534285714]
# Dvcf1 = [0.0489758, 0.06546305, 0.09428153333333332, 0.1434215, 0.23487100000000002, 0.3941209500000001, 0.6777793857142856, 1.2012322874999999, 2.159070477777778, 3.9164122, 7.190803772727273, 13.265428049999999, 23.988994923076923, 44.61915034285715]
# Dvcf2 = [0.0429817, 0.05797445, 0.0829606, 0.126184875, 0.2010943, 0.33898540000000005, 0.5911137, 1.0343251125, 1.8581238888888891, 3.3777031300000004, 6.180254127272727, 11.385017041666666, 20.573314046153843, 38.36959627142858]
# Dvcf3 = [0.0429751, 0.05496890000000001, 0.07795596666666667, 0.11518952499999999, 0.18524480000000002, 0.307455, 0.5293903285714286, 0.9349643249999999, 1.6831824111111109, 3.05554407, 5.603682572727273, 10.322610983333334, 18.623329323076923, 34.59052238571428]
# Dvcf4 = [0.0389775, 0.050470799999999996, 0.07229133333333333, 0.10918952499999998, 0.17448148, 0.2886585666666666, 0.49329088571428564, 0.8737698875, 1.5812571111111111, 2.8673630400000003, 5.279813972727273, 9.721227641666667, 17.54986724615385, 32.58920020000001]
# Dvcf5 = [0.038970199999999997, 0.04946575000000001, 0.07062433333333333, 0.10618910000000001, 0.16827978000000002, 0.27416320000000005, 0.47015764285714284, 0.836910675, 1.5225072000000002, 2.7685129800000006, 5.105267772727272, 9.411307066666666, 16.976653776923076, 31.668113364285716]
# Dvcf6 = [0.037976, 0.04797255, 0.06829170000000001, 0.10169065, 0.16133296000000003, 0.2680378666666667, 0.45805250000000003, 0.8158266624999999, 1.492660366666667, 2.7089673200000006, 4.997164336363636, 9.229754541666667, 16.636368861538465, 31.229382699999995]
# Dvcf7 = [0.0369867, 0.04748155, 0.06697446666666668, 0.098953725, 0.15958078, 0.26507898333333335, 0.4523761571428571, 0.8099836, 1.471809222222222, 2.67850873, 4.949123536363636, 9.134077941666668, 16.452410061538462, 30.763334085714288]
# Dvcf8 = [0.035983, 0.04647635, 0.06563016666666667, 0.0969479, 0.15562076000000002, 0.2571161666666667, 0.4406972571428571, 0.79239295, 1.4560611111111113, 2.6563390699999996, 4.913158836363637, 9.079956075, 16.38053987692308, 30.57526749285714]
#
# dcf = [0.0921798, 0.12767905000000002, 0.19797556666666663, 0.32158342500000003, 0.52200386, 0.8926596499999999, 1.5662475285714281, 2.9606388125, 5.558423777777778, 10.720886260000002, 20.33046438181818, 38.87655804166668, 73.30153241538461, 139.57338811428573]
#
# y1 = np.array(cf)
# y2 = np.array(Dvcf1)
# y3 = np.array(Dvcf2)
# y4 = np.array(Dvcf3)
# y5 = np.array(Dvcf4)
# y6 = np.array(Dvcf5)
# y7 = np.array(Dvcf6)
# y8 = np.array(Dvcf7)
# y9 = np.array(Dvcf8)
# y10 = np.array(dcf)
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# ax2 = ax.twinx()
# # 设置自变量的范围和个数
# x = np.linspace(10, 23, y1.shape[0])
# # 画图
# s1=ax.plot(x, y1, label='CF', linestyle='-', marker='^', markersize='8')
# s2=ax.plot(x, y2, label='DVCF1', linestyle='--', marker='D', markersize='8')
# s3=ax.plot(x, y3, label='DVCF2', linestyle=':', marker='v', markersize='8')
# s4=ax.plot(x, y4, label='DVCF3', linestyle='-.', marker='x', markersize='8')
# s5=ax.plot(x, y5, label='DVCF4', linestyle='-', marker='<', markersize='8')
# s6=ax.plot(x, y6, label='DVCF5', linestyle='--', marker='o', markersize='8')
# s7=ax.plot(x, y7, label='DVCF6', linestyle=':', marker='>', markersize='8')
# s8=ax.plot(x, y8, label='DVCF7', linestyle='-.', marker='s', markersize='8')
# s9=ax.plot(x, y9, label='DVCF8', linestyle='-', marker='*', markersize='8')
# s10=ax2.plot(x, y10, label='D-ary CF', linestyle='-', marker='+', markersize='8', color="r")
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('filter size()')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('n: filter size', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('VCF insertion time(s)', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax2.set_ylabel('D-ary CF insertion time(s)', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
#
# ax2.tick_params(labelsize=16)
# labels2 = ax2.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels2]
#
# # 刻度线
# for line in ax2.yaxis.get_ticklines():
#     # line is a Line2D instance
#     line.set_color('r')
#     # line.set_markersize(25)
#     # line.set_markeredgewidth(3)
#
# # 刻度 文字
# for label in ax2.yaxis.get_ticklabels():
#     # label is a Text instance
#     label.set_color('r')
#     # label.set_rotation(45)
#     # label.set_fontsize(16)
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# ss = s1+s2+s3+s4+s5+s6+s7+s8+s9+s10
# labs = [l.get_label() for l in ss]
# ax.legend(ss, labs, loc="best", prop={'family': 'Times New Roman', "size": 14})
# # legend = ax.legend(loc='best')
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_6.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# ###实验二中第七个图，两种方案不同扩展成功率下的平均存储消耗时间。
# ##输入因变量
# s4 = [0.02748925, 0.03998225, 0.06247458333333333, 0.10557218749999998, 0.16741604999999998, 0.28069358333333333,
#       0.47725275, 0.85661915625, 1.5750930277777777, 2.8324746250000006, 5.060922068181818, 9.153398208333334,
#       16.89019121153846, 31.794966125]
# s1 = [0.019987, 0.0349815, 0.05663566666666667, 0.09493499999999999, 0.1619022, 0.2681901666666667, 0.4626072857142857,
#       0.820809, 1.5280740000000002, 2.8174965, 5.136727636363637, 9.7386485, 17.927607769230768, 34.129544571428575]
# s = []
# for i in range(len(s1)):
#     s.append(s1[i] * 0.7 + s4[i] * 0.3)
# print(s)
#
# cf = [0.0429885, 0.0684698, 0.10561219999999999, 0.16316195, 0.26758262, 0.4531954, 0.7939508285714284, 1.4165738125,
#       2.5719223777777778, 4.69026526, 8.625461409090908, 15.932990541666667, 28.888658007692307, 53.40469534285714]
# vcf1 = [0.0339817, 0.05597305, 0.0889556, 0.1426752, 0.23627636, 0.4007892999999999, 0.7003423571428572,
#         1.2422141749999998, 2.2362548222222225, 4.05744027, 7.4381289, 13.662967724999998, 24.640267884615387,
#         45.77012900714287]
# vcf2 = [0.029976000000000003, 0.04347070000000001, 0.06829503333333334, 0.107438875, 0.1783016, 0.30200166666666667,
#         0.5254320714285715, 0.9342512, 1.6990953, 3.08995527, 5.684608472727272, 10.48849355, 18.87169456923077,
#         35.26598804285714]
# vcf3 = [0.025991999999999998, 0.039983050000000006, 0.05930173333333334, 0.09495252500000001, 0.15811726,
#         0.27019076666666664, 0.47217748571428575, 0.8476742875, 1.5603930999999998, 2.8388908, 5.249569045454545,
#         9.687255933333331, 17.443727792307694, 32.57380921428571]
# vcf4 = [0.0259851, 0.039476, 0.0596356, 0.0944483, 0.15531657999999998, 0.2631927833333333, 0.46218228571428577,
#         0.8269350124999999, 1.5147510111111113, 2.7564345699999997, 5.096106190909091, 9.432475608333334,
#         16.988293146153847, 31.954194078571422]
# vcf5 = [0.0259799, 0.035978899999999994, 0.058635333333333345, 0.093198025, 0.15331492000000002, 0.25819276666666663,
#         0.44861397142857146, 0.8094400374999999, 1.4905378111111112, 2.7244480299999996, 5.045311163636364,
#         9.346018291666667, 16.844634153846155, 31.55701582142857]
# vcf6 = s
# vcf7 = [0.020023, 0.0399945, 0.06329933333333333, 0.09245025000000001, 0.155916, 0.2631865, 0.44975457142857145,
#         0.80207075, 1.589151, 2.8411462999999997, 5.210549181818181, 9.561235833333333, 17.345686076923077,
#         31.959488785714285]
#
# Dvcf1 = [0.0489758, 0.06546305, 0.09428153333333332, 0.1434215, 0.23487100000000002, 0.3941209500000001,
#          0.6777793857142856, 1.2012322874999999, 2.159070477777778, 3.9164122, 7.190803772727273, 13.265428049999999,
#          23.988994923076923, 44.61915034285715]
# Dvcf2 = [0.0429817, 0.05797445, 0.0829606, 0.126184875, 0.2010943, 0.33898540000000005, 0.5911137, 1.0343251125,
#          1.8581238888888891, 3.3777031300000004, 6.180254127272727, 11.385017041666666, 20.573314046153843,
#          38.36959627142858]
# Dvcf3 = [0.0429751, 0.05496890000000001, 0.07795596666666667, 0.11518952499999999, 0.18524480000000002, 0.307455,
#          0.5293903285714286, 0.9349643249999999, 1.6831824111111109, 3.05554407, 5.603682572727273, 10.322610983333334,
#          18.623329323076923, 34.59052238571428]
# Dvcf4 = [0.0389775, 0.050470799999999996, 0.07229133333333333, 0.10918952499999998, 0.17448148, 0.2886585666666666,
#          0.49329088571428564, 0.8737698875, 1.5812571111111111, 2.8673630400000003, 5.279813972727273,
#          9.721227641666667, 17.54986724615385, 32.58920020000001]
# Dvcf5 = [0.038970199999999997, 0.04946575000000001, 0.07062433333333333, 0.10618910000000001, 0.16827978000000002,
#          0.27416320000000005, 0.47015764285714284, 0.836910675, 1.5225072000000002, 2.7685129800000006,
#          5.105267772727272, 9.411307066666666, 16.976653776923076, 31.668113364285716]
# Dvcf6 = [0.037976, 0.04797255, 0.06829170000000001, 0.10169065, 0.16133296000000003, 0.2680378666666667,
#          0.45805250000000003, 0.8158266624999999, 1.492660366666667, 2.7089673200000006, 4.997164336363636,
#          9.229754541666667, 16.636368861538465, 31.229382699999995]
# Dvcf7 = [0.0369867, 0.04748155, 0.06697446666666668, 0.098953725, 0.15958078, 0.26507898333333335, 0.4523761571428571,
#          0.8099836, 1.471809222222222, 2.67850873, 4.949123536363636, 9.134077941666668, 16.452410061538462,
#          30.763334085714288]
# Dvcf8 = [0.035983, 0.04647635, 0.06563016666666667, 0.0969479, 0.15562076000000002, 0.2571161666666667,
#          0.4406972571428571, 0.79239295, 1.4560611111111113, 2.6563390699999996, 4.913158836363637, 9.079956075,
#          16.38053987692308, 30.57526749285714]
#
# dcf = [0.0921798, 0.12767905000000002, 0.19797556666666663, 0.32158342500000003, 0.52200386, 0.8926596499999999,
#        1.5662475285714281, 2.9606388125, 5.558423777777778, 10.720886260000002, 20.33046438181818, 38.87655804166668,
#        73.30153241538461, 139.57338811428573]
#
# capacity1 = [2 ** 10, 2 ** 11, 2 ** 12, 2 ** 13, 2 ** 14, 2 ** 15, 2 ** 16, 2 ** 17, 2 ** 18, 2 ** 19, 2 ** 20, 2 ** 21,
#              2 ** 22, 2 ** 23]
#
# for i in range(len(capacity1)):
#     cf[i] = cf[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf1[i] = vcf1[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf2[i] = vcf2[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf3[i] = vcf3[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf4[i] = vcf4[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf5[i] = vcf5[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf6[i] = vcf6[i] / capacity1[i]
# for i in range(len(capacity1)):
#     vcf7[i] = vcf7[i] / capacity1[i]
#
# for i in range(len(capacity1)):
#     Dvcf1[i] = Dvcf1[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf2[i] = Dvcf2[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf3[i] = Dvcf3[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf4[i] = Dvcf4[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf5[i] = Dvcf5[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf6[i] = Dvcf6[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf7[i] = Dvcf7[i] / capacity1[i]
# for i in range(len(capacity1)):
#     Dvcf8[i] = Dvcf8[i] / capacity1[i]
#
# for i in range(len(capacity1)):
#     dcf[i] = dcf[i] / capacity1[i]
#
# y1 = [np.mean(cf), np.mean(vcf1), np.mean(vcf2), np.mean(vcf3), np.mean(vcf4), np.mean(vcf5), np.mean(vcf6),
#       np.mean(vcf7)]
# y2 = [np.mean(cf), np.mean(Dvcf1), np.mean(Dvcf2), np.mean(Dvcf3), np.mean(Dvcf4), np.mean(Dvcf5), np.mean(Dvcf6),
#       np.mean(Dvcf7), np.mean(Dvcf8)]
# y3 = [np.mean(dcf),np.mean(dcf),np.mean(dcf),np.mean(dcf),np.mean(dcf),np.mean(dcf),np.mean(dcf),np.mean(dcf)]
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(y1)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(y2)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# y3 = np.array(y3)
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# ax2 = ax.twinx()
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # import numpy as np
# # x3 = np.arange(0,1)
# # print(x3)
# # 画图
# s1=ax.plot(x1, y1 * 10 ** 6, label='IVCF', linestyle='-', marker='o', markersize='8')
# s2=ax.plot(x2, y2 * 10 ** 6, label='DVCF', linestyle='--', marker='^', markersize='8')
# s3=ax2.plot(x1, y3 * 10 ** 6, label='D-ary CF', color="r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('VCF insertion time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylim(y1[7] * 10 ** 6-1,y1[0] * 10 ** 6+1)
#
# ax2.set_ylabel('D-ary CF insertion time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax2.set_ylim(0,35)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# ax2.tick_params(labelsize=16)
# labels2 = ax2.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels2]
#
# # 刻度线
# for line in ax2.yaxis.get_ticklines():
#     # line is a Line2D instance
#     line.set_color('r')
#     # line.set_markersize(25)
#     # line.set_markeredgewidth(3)
#
# # 刻度 文字
# for label in ax2.yaxis.get_ticklabels():
#     # label is a Text instance
#     label.set_color('r')
#     # label.set_rotation(45)
#     # label.set_fontsize(16)
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# ss = s1+s2+s3
# labs = [l.get_label() for l in ss]
# ax.legend(ss, labs, loc="center right", prop={'family': 'Times New Roman', "size": 14})
# # legend = ax.legend(loc='best')
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_2_7.svg', dpi=600, format='svg')
# # fig.savefig('1.png')



# ###实验三中第一个图,针对 100% existed 的数据集对象进行查询
# ##输入因变量
#
# # 这是50次实验结果的
# # vcf = [1.681709720611572e-05, 1.7810969257354737e-05, 1.7927970657348633e-05, 1.7944317131042482e-05,
# #        1.797271827697754e-05, 1.8048509349822998e-05, 1.805230543136597e-05, 1.813417881011963e-05]
# # Dvcf = [1.681709720611572e-05, 1.7152182960510255e-05, 1.7346394710540775e-05, 1.7471082973480225e-05,
# #         1.7651285648345947e-05, 1.7754818553924562e-05, 1.7927093620300294e-05, 1.814665885925293e-05,
# #         1.822555374145508e-05]
#
# # 这是10次实验结果的
# vcf = [1.78527663230896e-05, 1.8886557579040527e-05, 1.900194778442383e-05, 1.895163841247559e-05,
#        1.9071562004089358e-05, 1.9151665401458742e-05, 1.8990506458282474e-05, 1.9040092372894287e-05]
# Dvcf = [1.78527663230896e-05, 1.805875768661499e-05, 1.8306723690032956e-05, 1.8473614215850833e-05,
#         1.8602356910705565e-05, 1.8833145618438722e-05, 1.8955214214324953e-05, 1.914689702987671e-05,
#         1.9298541164398193e-05]
#
# dcf = [5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05,
#        5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05]
#
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(vcf)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(Dvcf)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# y3 = np.array(dcf)
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # 画图
# s1 = ax.plot(x1, y1 * 10 ** 6, label='IVCF', linestyle='-', marker='o', markersize='8')
# s2 = ax.plot(x2, y2 * 10 ** 6, label='DVCF', linestyle='--', marker='^', markersize='8')
# ax2 = ax.twinx()
# s3 = ax2.plot(x1, y3 * 10 ** 6, label='D-ary CF', color="r", linestyle='-.')
#
# # plt.axhline(y=np.mean(dcf)*10 ** 6, label='DCF', color="r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# ax.set_ylabel('VCF lookup time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# ax2.set_ylabel('D-ary CF lookup time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# ax.set_ylim(y1[0] * (10 ** 6)*0.99, y1[7] * (10 ** 6)*1.02)
# ax2.set_ylim(0,5.3721364116668704e-05* (10 ** 6)*1.03)
# # 设置刻度
# ax.tick_params(labelsize=19)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
#
# ax2.tick_params(labelsize=19)
# labels2 = ax2.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels2]
#
# # 刻度线
# for line in ax2.yaxis.get_ticklines():
#     # line is a Line2D instance
#     line.set_color('r')
#     # line.set_markersize(25)
#     # line.set_markeredgewidth(3)
#
# # 刻度 文字
# for label in ax2.yaxis.get_ticklabels():
#     # label is a Text instance
#     label.set_color('r')
#     # label.set_rotation(45)
#     # label.set_fontsize(16)
#
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# ss = s1 + s2 + s3
# labs = [l.get_label() for l in ss]
# ax.legend(ss, labs, loc="best", prop={'family': 'Times New Roman', "size": 20})
# # legend = ax.legend(loc='best')
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_3_1.svg', dpi=600, format='svg')
# # fig.savefig('1.png')
#
#
# ###实验三中第二个图,针对50%mixed的数据集对象
# ##输入自变量
#
# # #这是50次实验结果的平均值
# # vcf = [1.708735708236694e-05, 1.839453420639038e-05, 1.8412332916259765e-05, 1.867142936706543e-05,
# #        1.860008508682251e-05, 1.8601243324279786e-05, 1.8651924591064455e-05, 1.871554681777954e-05]
# # Dvcf = [1.708735708236694e-05, 1.7402036590576174e-05, 1.756843309402466e-05, 1.777751142501831e-05,
# #         1.801962131500244e-05, 1.8292974891662596e-05, 1.8491753273010255e-05, 1.8758723335266113e-05,
# #         1.8851220779418947e-05]
#
# # 这是10次实验结果的平均值
# vcf = [1.80950026512146e-05, 1.9426329803466797e-05, 1.9515968704223633e-05, 1.9555072021484376e-05,
#        1.9647585105895995e-05, 1.9643775558471683e-05, 1.9667604351043703e-05, 1.962088317871094e-05]
# Dvcf = [1.80950026512146e-05, 1.8198004722595214e-05, 1.8535595321655272e-05, 1.883778419494629e-05,
#         1.8947590827941896e-05, 1.9198401165008542e-05, 1.9366167354583744e-05, 1.9666968536376952e-05,
#         1.9877497100830076e-05]
# dcf = [5.377371120452881e-05, 5.377371120452881e-05, 5.377371120452881e-05, 5.377371120452881e-05,
#        5.377371120452881e-05, 5.377371120452881e-05, 5.377371120452881e-05, 5.377371120452881e-05]
#
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(vcf)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(Dvcf)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# y3 = np.array(dcf)
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# ax2 = ax.twinx()
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # 画图
# s1=ax.plot(x1, y1 * 10 ** 6, label='IVCF', linestyle='-', marker='o', markersize='8')
# s2=ax.plot(x2, y2 * 10 ** 6, label='DVCF', linestyle='--', marker='^', markersize='8')
# s3=ax2.plot(x1, y3 * 10 ** 6, label='D-ary CF', color="r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
#
# ax.set_ylim(y1[0] * (10 ** 6)*0.99, y1[7] * (10 ** 6)*1.02)
# ax2.set_ylim(0,5.377371120452881e-05* (10 ** 6)*1.03)
#
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# ax.set_ylabel('VCF lookup time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# ax2.set_ylabel('D-ary CF lookup time(us)', fontdict={"family":"Times New Roman","weight": "normal", "size": 22})
# # 设置刻度
# ax.tick_params(labelsize=19)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
#
# ax2.tick_params(labelsize=19)
# labels2 = ax2.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels2]
#
# # 刻度线
# for line in ax2.yaxis.get_ticklines():
#     # line is a Line2D instance
#     line.set_color('r')
#     # line.set_markersize(25)
#     # line.set_markeredgewidth(3)
#
# # 刻度 文字
# for label in ax2.yaxis.get_ticklabels():
#     # label is a Text instance
#     label.set_color('r')
#     # label.set_rotation(45)
#     # label.set_fontsize(16)
#
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# ss = s1 + s2 + s3
# labs = [l.get_label() for l in ss]
# ax.legend(ss, labs, loc="best", prop={'family': 'Times New Roman', "size": 20})
# # legend = ax.legend(loc='best')
#
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_3_2.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# ##实验四中第一个图，比较VCF和DVCF的假阳性实验可视化结果
# #因变量输入
#
# vcf = [0.0004848480224609375, 0.0007396697998046875, 0.0008600234985351562, 0.0009203910827636719,
#        0.0009401321411132812, 0.0009610176086425782, 0.0009737968444824219, 0.000974273681640625]
# dvcf = [0.0004848480224609375, 0.0005478858947753906, 0.0006107330322265625, 0.0006702423095703125,
#         0.0007290840148925781, 0.0007913589477539062, 0.0008525848388671875, 0.0009150505065917969,
#         0.0009736061096191406]
#
# dcf = [0.0009667686023926206]
#
#
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(vcf)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(dvcf)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
# import math
# y11 = []
#
# for i in range(len(y1)):
#     y11.append(math.log(y1[i], 10))
# print(y11)
#
# y21 = []
#
# for i in range(len(y2)):
#     y21.append(math.log(y2[i], 10))
# print(y21)
#
# y1 = y11
# y2 = y21
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# x1 = []
# for i in range(8):
#     x = 1 - 2 ** (i - 14) - 2 ** (0 - i)
#     x1.append(x)
#
# x2 = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 0.984375]
# # 画图
# ax.plot(x1, y1, label='IVCF', linestyle='-', marker='o', markersize='8')
# ax.plot(x2, y2, label='DVCF', linestyle='--', marker='^', markersize='8')
# plt.axhline(y=math.log(0.0009667686023926206, 10), label='D-ary CF', color="r", linestyle='-.')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# # ax.set_xlabel('time(s)')
# # ax.set_ylabel('distance(m)')
# ax.set_xlabel('r: rate of four buckets', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# ax.set_ylabel('log$_{10}$ξ$^‘$ (ξ$^‘$: rate of TRUE)', fontdict={"family":"Times New Roman","weight": "normal", "size": 19})
# # 设置刻度
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
# #
# plt.show()
# fig.savefig('C:/Users/fptjy/Desktop/tu/p_4_1.svg', dpi=600, format='svg')
# # fig.savefig('1.png')


# # 输入因变量
#
# y1 = [1.586653, 1.770202, 1.962381, 2.076691, 2.397812, 2.507596, 2.591020, 2.727789, 2.966042, 3.155801, 3.409778]
# y2 = [1.677858, 1.868206, 2.082940, 2.222709, 2.436606, 2.689765, 2.698093, 2.931860, 3.103382, 3.322159, 3.581809]
# # y1 = pd.read_csv('11.csv')
# y1 = np.array(y1)
# # y2 = pd.read_csv('12.csv')
# y2 = np.array(y2)
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.8), dpi=100)
# # 设置自变量的范围和个数
# x = np.linspace(1, 10, y1.shape[0])
# # 画图
# ax.plot(x, y1, label='x', linestyle='-', marker='*', markersize='10')
# ax.plot(x, y2, label='y', linestyle='--', marker='o', markersize='10')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('time(s)')
# ax.set_ylabel('distance(m)')
# # 设置刻度
# ax.tick_params(axis='both')
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best')
#
# plt.show()
#
# # fig.savefig('1.png')


# # 实验五中的柱状图绘制
# # 柱状图
# #五组哈希函数的实验，包括两组不理想的
# cf = [44.5729759,67.7511149,38.2211452,107.7386648,68.67116569999999]
# vcf = [26.753895,48.267968700000004,20.1262401,116.3075921,125.3308547]
# Dvcf = [26.102628,48.5302823,19.635804999999998,107.9220585,116.9925798]
#
# #x = ['REST','LAPT','AUTO']
# x = np.arange(5) #总共有几组，就设置成几，我们这里有三组，所以设置为3
# total_width, n = 0.8,  3  # 有多少个类型，只需更改n即可，比如这里我们对比了四个，那么就把n设成4
# width = total_width / n
# x = x - (total_width - width) / 2
# plt.bar(x, cf, color = "r",width=width,label='cf')
# plt.bar(x + width, vcf, color = "y",width=width,label='vcf')
# plt.bar(x + 2 * width, Dvcf , color = "c",width=width,label='Dvcf')
#
#
# plt.xlabel('hash functions', fontdict={"weight": "normal", "size": 15})
# plt.ylabel('the time overhead (s)', fontdict={"weight": "normal", "size": 15})
# plt.legend(loc='best')
# # plt.legend(loc = "best")
# plt.xticks([0,1,2,3,4],['NFV_64','Murmur','DJB',"PJW","BKDR"])
# # my_y_ticks = np.arange(0.8, 0.95, 0.02)
# # plt.ylim((0.8, 0.95))
# # plt.yticks(my_y_ticks)
# # plt.savefig('C:/Users/fptjy/Desktop/tu/p_5_1.svg', dpi=600, format='svg')
# plt.show()


# #三组哈希函数的实验，不包括两组不理想的
# cf = [44.5729759,67.7511149,38.2211452]
# vcf = [26.753895,48.267968700000004,20.1262401]
# Dvcf = [26.102628,48.5302823,19.635804999999998]
#
#
# #x = ['REST','LAPT','AUTO']
# x = np.arange(3) #总共有几组，就设置成几
# total_width, n = 0.6,  3  # 有多少个类型，只需更改n即可，比如这里我们对比了四个，那么就把n设成4
# width = total_width / n
# x = x - (total_width - width) / 2
# plt.bar(x, cf, color = "r",width=width,label='cf')
# plt.bar(x + width, vcf, color = "y",width=width,label='vcf')
# plt.bar(x + 2 * width, Dvcf , color = "c",width=width,label='Dvcf')
#
#
# plt.xlabel('hash functions', fontdict={"weight": "normal", "size": 15})
# plt.ylabel('the time overhead (s)', fontdict={"weight": "normal", "size": 15})
# plt.legend(loc='best')
# # plt.legend(loc = "best")
# plt.xticks([0,1,2],['NFV_64','Murmur','DJB'])
# # my_y_ticks = np.arange(0.8, 0.95, 0.02)
# # plt.ylim((0.8, 0.95))
# # plt.yticks(my_y_ticks)
# plt.savefig('C:/Users/fptjy/Desktop/tu/p_5_2.svg', dpi=600, format='svg')
# plt.show()
